openapi: 3.0.3
info:
  title: Swagger TV Show Review - OpenAPI 3.0
  description: |-

  termsOfService: http://swagger.io/terms/
  contact:
    email: xf2243@columbia.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: Search
    description: Search this TV show
    externalDocs:
      description: Find out what this TV show about
      url: http://swagger.io
  - name: user
    description: Operations about user
  - name: Review
    description: Review details
  - name: FriendList
    description: FriendList for the user
  - name: WatchList 
    description:  WatchList for the user  
  - name: Recommendation 
    description:  Recommendation for the user  
  - name: Forum 
    description:  Forum for the user    
    
paths:
 
  /Search/{userId}:
    get:
      tags:
        - Search
      summary: Returns TVshow short summary based on showId
      description: Returns a map of status codes to quantities
      operationId: getTVShowSummary
      parameters:
        - name: userId
          in: path
          description: 'userId'
          required: true
          schema:
            type: integer
        - name: showName
          in: query
          schema:
            type: integer
          description: showName    
          
        - name: showId
          in: query
          schema:
            type: integer
          description: showId 
          
        - name: seasonNum
          in: query
          description: 'userId'
          schema:
            type: integer
            
        - name: episodeNum
          in: query
          description: 'episodeNum'
          schema:
            type: integer

      responses:
        '200':
          description: successful returns TVshow short summary based on showId
          content:
            application/json:
              schema:
                type: object
                properties:
                  searchResult:
                    type: string
                    description: short summary

        
  /Review/{userId}:
    get:
      tags:
        - Review
      summary: Returns TVshow short summary based on showId
      description: Returns a map of status codes to quantities
      operationId: getReviews
      parameters:
        - name: userId
          in: path
          description: 'userId'
          required: true
          schema:
            type: integer
        - name: showName
          in: query
          schema:
            type: integer
          description: showName Notice-- either showName or showId is required  
          required: true
          
        - name: showId
          in: query
          schema:
            type: integer
          description: showId. Notice-- either showName or showId is required
          
        - name: seasonNum
          in: query
          description: 'userId'
          schema:
            type: integer
            
        - name: episodeNum
          in: query
          description: 'episodeNum'
          schema:
            type: integer

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    post:
      tags:
        - Review
      description: Let a user post a new review
      parameters:
        - name: userId
          in: path
          description: 'userId'
          required: true
          schema:
            type: integer
        - name: showName
          in: query
          schema:
            type: integer
          description: showName showName is required  
          required: true
          
        - name: showId
          in: query
          schema:
            type: integer
          description: showId. Notice-- either showName or showId is required
          
        - name: seasonNum
          in: query
          description: 'userId'
          schema:
            type: integer
            
        - name: episodeNum
          in: query
          description: 'episodeNum'
          schema:
            type: integer
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              required:
                - userId
              properties:
                showName:
                  type: string
                showGenre:
                  type: string
                postTime:
                  type: integer
                rating:
                  type: number
                reviewContent:
                  type: string

      responses:
        '200':
          description: Successfully created a new artist

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
    
    delete:
      tags:
        - Review
      summary: Delete reviews
      description: This can only be done by the logged in user.
      operationId: delete reviews
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
        - name: showName
          in: query
          schema:
            type: integer
          description: showName Notice-- either showName or showId is required  
          required: true
          
        - name: showId
          in: query
          schema:
            type: integer
          description: showId. Notice-- either showName or showId is required
          
        - name: seasonNum
          in: query
          description: 'userId'
          schema:
            type: integer
            
        - name: episodeNum
          in: query
          description: 'episodeNum'
          schema:
            type: integer
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
 
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successfully login
        '404':
        
          description: cannot find the user
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successfully logout
        '404':
        
          description: cannot find the user
        '400':
          description: Invalid request
          
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user Id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getUserbyUserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    description: get the user's email
                  userName:
                    type: string
                    description: get the user's userName
         
  
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful delete the user from User DB    
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
          
          
          
          
  /friendList/{userId}:
    get:
      tags:
        - FriendList
      summary: Get user's friend list by user Id
      description: ''
      operationId: getFriendById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successfully get friendList from userID
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["Tom", "Jerry"]


      
          
    post:
      tags:
        - FriendList
      summary: add the first friend to friendlist
      description: ''
      operationId: addFriendById
      parameters:
        - name: userId
          in: path
          description: 'Add to users friendList'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successfully get friendList from userID

        '404':
          description: User doesn't exist

        '400':
          description: Invalid request cannot add this friend to user's friendList

    put:
      tags:
        - FriendList
      summary: update the friendlist
      description: ''
      operationId: updateFriendById
      parameters:
        - name: userId
          in: path
          description: 'Add to users friendList'
          required: true
          schema:
            type: integer


      responses:
        '200':
          description: Successfully update user's friendList
        '404':
          description: User doesn't exist

        '400':
          description:  Invalid request, cannot add this friend to user's friendList
  
          
          
          
  /Recommendation/{userId}:
    get:
      tags:
        - Recommendation
      summary: Get user's Recommendation list by user Id
      description: ''
      operationId: getRecommendationById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successfully get recommendation from userID
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["show1", "show2", "show3"]
        '404':
          description: User doesn't exist
        '400':
          description: Invalid request
    post:
      tags:
        - Recommendation
      summary: add a Recommendation to RecommendationList
      description: ''
      operationId: addRecommendationById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
        - name: showName
          in: query
          description: 'Add it to users Recommendation List'
          schema:
            type: string
        - name: showId
          in: query
          description: 'Add it to users Recommendation List'
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              required:
                - showName
              properties:
                showName:
                  type: string

      responses:
        '200':
          description: Successfully update user's RecommendationList

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
        '404':
          description: User doesn't exist
    put:
      tags:
        - Recommendation
      summary: update the RecommendationList
      description: ''
      operationId: updateRecommendationById
      parameters:
        - name: userId
          in: path
          description: 'Add to users Recommendation List'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              required:
                - showName 
              properties:
                showName:
                  type: string

      responses:
        '200':
          description: Successfully update user's RecommendationList
                  
        '404':
          description: User doesn't exist

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
                    
                    
  /WatchList/{userId}:
    get:
      tags:
        - WatchList
      summary: get watchList
      description: ''
      operationId: getMovieById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successfully get watchList from userID
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["show1", "show2", "show3"]
        '404':
          description: User doesn't exist
        '400':
          description: Invalid request to get the watch List
          
    post:
      tags:
        - WatchList
      summary: Add to users WatchList
      description: ''
      operationId: addShowListById
      parameters:
        - name: userId
          in: path
          description: 'Add to users WatchList'
          required: true
          schema:
            type: integer
        - name: showName
          in: query
          description: 'Add showName to users WatchList'
          schema:
            type: string
        - name: showId
          in: query
          description: 'Add showId to users WatchList'
          schema:
            type: integer
      responses:
        '200':
          description: successfully add a show to  watchList from userID
        '404':
          description: User doesn't exist
        '400':
          description: Invalid request to add a show
    put:
      tags:
        - WatchList
      summary: Update users WatchList
      description: ''
      operationId: updateMovieListById
      parameters:
        - name: userId
          in: path
          description: 'Add to users WatchList'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  successfully update watchList of a user
        '404':
          description: User doesn't exist
        '400':
          description: Invalid request to update a show
          
  /Forum/:
    get:
      tags:
        - Forum
      summary: Get group by group Id
      description: ''
      operationId: getGroupById
      parameters:
        - name: GroupId
          in: query
          description: "specify the Forum by groupId"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successfully get group from group Id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["group1", "group2", "group3"]
        '404':
          description: group Id doesn't exist
        '400':
          description: Invalid request
          
  /Forum/{genre}:
    get:
      tags:
        - Forum
      summary: Get a list of groups by genre
      description: ''
      operationId: getGroupByGenre
      parameters:
        - name: genre
          in: path
          description: "specify the Forum by Genre"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully get group based on genre
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["romaticGroup", "comedyGroup"]
          
        '404':
          description: genre doesn't exist
        '400':
          description: Invalid request
          
  /Forum/{groupId}/{userId}:     
    post:
      tags:
        - Forum
      summary: Add to user to  a group
      description: ''
      operationId: addToGroupById
      parameters:
        - name: userId
          in: path
          description: 'userId'
          required: true
          schema:
            type: integer
        - name: groupId
          in: path
          description: 'groupId'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully add to user to a group
        '404':
          description: User doesn't exist


        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

    delete:
      tags:
        - Forum
      summary: Delete user from this group
      description: This can only be done by the logged in user.
      operationId: deleteUserFromGroup
      parameters:
        - name: userId
          in: path
          description: 'userId'
          required: true
          schema:
            type: integer
        - name: groupId
          in: path
          description: 'groupId'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation    
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    
  
  
          
          
          
